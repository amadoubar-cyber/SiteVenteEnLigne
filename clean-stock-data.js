// Script pour nettoyer toutes les donn√©es de stock et mouvements
// Ce script supprime toutes les donn√©es de d√©monstration du syst√®me de stock

console.log('üßπ Nettoyage des donn√©es de stock et mouvements...');

// Cl√©s de stockage li√©es au stock
const STOCK_STORAGE_KEYS = [
  'stockMovements',
  'stock_movements',
  'adminProducts',
  'productStocks',
  'stock_data',
  'movements_data',
  'demo_stock',
  'test_movements',
  'stock_demo',
  'movements_demo',
  'stock_test',
  'movements_test'
];

// Fonction pour nettoyer les donn√©es de stock
function cleanStockData() {
  try {
    console.log('üîç Recherche de donn√©es de stock...');
    
    let foundKeys = [];
    let removedCount = 0;
    
    // Nettoyer localStorage
    STOCK_STORAGE_KEYS.forEach(key => {
      const data = localStorage.getItem(key);
      if (data) {
        try {
          const parsed = JSON.parse(data);
          if (Array.isArray(parsed) && parsed.length > 0) {
            localStorage.removeItem(key);
            foundKeys.push(key);
            removedCount += parsed.length;
            console.log(`üóëÔ∏è Supprim√© ${parsed.length} √©l√©ments de: ${key}`);
          } else if (typeof parsed === 'object' && Object.keys(parsed).length > 0) {
            localStorage.removeItem(key);
            foundKeys.push(key);
            console.log(`üóëÔ∏è Supprim√© donn√©es objet de: ${key}`);
          }
        } catch (e) {
          // Si ce n'est pas du JSON valide, le supprimer quand m√™me
          localStorage.removeItem(key);
          foundKeys.push(key);
          console.log(`üóëÔ∏è Supprim√© donn√©es non-JSON de: ${key}`);
        }
      }
    });
    
    // Nettoyer sessionStorage aussi
    STOCK_STORAGE_KEYS.forEach(key => {
      const data = sessionStorage.getItem(key);
      if (data) {
        sessionStorage.removeItem(key);
        console.log(`üóëÔ∏è Supprim√© (session): ${key}`);
      }
    });
    
    // Nettoyer aussi les cl√©s avec des variantes
    const allLocalStorageKeys = Object.keys(localStorage);
    allLocalStorageKeys.forEach(key => {
      if (key.toLowerCase().includes('stock') || 
          key.toLowerCase().includes('movement') || 
          key.toLowerCase().includes('adminproducts')) {
        localStorage.removeItem(key);
        console.log(`üóëÔ∏è Supprim√© cl√© suspecte: ${key}`);
      }
    });
    
    console.log('\n‚úÖ Nettoyage termin√© !');
    console.log(`üìä Cl√©s trouv√©es et supprim√©es: ${foundKeys.length}`);
    console.log(`üìä √âl√©ments supprim√©s: ${removedCount}`);
    
    if (foundKeys.length > 0) {
      console.log('\nüóëÔ∏è Cl√©s supprim√©es:');
      foundKeys.forEach(key => console.log(`   - ${key}`));
    }
    
    // V√©rification finale
    const remainingStock = STOCK_STORAGE_KEYS.filter(key => {
      const data = localStorage.getItem(key);
      return data && data !== '[]' && data !== 'null' && data !== '{}';
    });
    
    if (remainingStock.length === 0) {
      console.log('\n‚úÖ Interface stock compl√®tement vide - pr√™te pour vos donn√©es !');
      console.log('\nüìã Instructions:');
      console.log('1. Actualisez la page (F5)');
      console.log('2. L\'interface "Mouvements de Stock" sera vide');
      console.log('3. Vous pouvez maintenant ajouter vos propres produits et mouvements');
      console.log('4. Toutes les statistiques seront bas√©es sur vos vraies donn√©es');
    } else {
      console.log('\n‚ö†Ô∏è Cl√©s restantes:', remainingStock);
    }
    
    return {
      success: true,
      removedKeys: foundKeys,
      removedItems: removedCount,
      remainingKeys: remainingStock
    };
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Ex√©cuter le nettoyage
const result = cleanStockData();

// Exporter pour utilisation dans la console
if (typeof window !== 'undefined') {
  window.cleanStockData = cleanStockData;
  console.log('\nüí° Pour nettoyer √† nouveau, utilisez: cleanStockData()');
}
