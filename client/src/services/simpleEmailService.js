// SERVICE EMAIL ULTRA-SIMPLE - PAS DE COMPLEXIT√â
class SimpleEmailService {
  constructor() {
    this.verifications = new Map();
  }

  // G√©n√©rer un code simple
  generateCode() {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  // Envoyer un email (essayer r√©el d'abord, puis console)
  async sendVerificationEmail(email, firstName, lastName) {
    const code = this.generateCode();
    
    // NETTOYER : Supprimer l'ancienne v√©rification
    this.verifications.delete(email);
    
    // Stocker la nouvelle v√©rification
    this.verifications.set(email, {
      code: code,
      email: email,
      firstName: firstName,
      lastName: lastName,
      createdAt: new Date().toISOString(),
      verified: false,
      attempts: 0,
      maxAttempts: 3
    });

    // Essayer d'envoyer un email r√©el
    try {
      const response = await fetch('http://localhost:5000/api/email/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          to: email,
          subject: 'Code de v√©rification - Bowoye Multi Services',
          template: 'verification',
          data: {
            firstName: firstName,
            lastName: lastName,
            verificationCode: code
          }
        })
      });

      if (response.ok) {
        console.log(`‚úÖ EMAIL R√âEL ENVOY√â √Ä: ${email}`);
        console.log(`üîë CODE: ${code}`);
        console.log(`üë§ NOM: ${firstName} ${lastName}`);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        return {
          success: true,
          message: `Email envoy√© √† ${email} - V√©rifiez votre bo√Æte !`,
          code: code
        };
      } else {
        throw new Error('Erreur serveur email');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Email r√©el √©chou√©, affichage console:', error.message);
      
      // Fallback : afficher dans la console
      console.log(`üìß EMAIL SIMPLE ENVOY√â √Ä: ${email}`);
      console.log(`üîë CODE DE V√âRIFICATION: ${code}`);
      console.log(`üë§ NOM: ${firstName} ${lastName}`);
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

      return {
        success: true,
        message: `Code envoy√© √† ${email} (mode console)`,
        code: code
      };
    }
  }

  // V√©rifier le code
  verifyCode(email, inputCode) {
    const verification = this.verifications.get(email);
    
    if (!verification) {
      return {
        success: false,
        message: 'Aucune v√©rification trouv√©e'
      };
    }

    if (verification.attempts >= verification.maxAttempts) {
      return {
        success: false,
        message: 'Trop de tentatives'
      };
    }

    // Comparaison simple
    if (verification.code === inputCode.toString()) {
      verification.verified = true;
      return {
        success: true,
        message: 'Code correct !'
      };
    } else {
      verification.attempts += 1;
      return {
        success: false,
        message: `Code incorrect. ${verification.maxAttempts - verification.attempts} tentatives restantes.`
      };
    }
  }

  // Obtenir le code pour debug
  getCode(email) {
    const verification = this.verifications.get(email);
    return verification ? verification.code : null;
  }

  // V√©rifier si un email est d√©j√† v√©rifi√©
  isEmailVerified(email) {
    const verification = this.verifications.get(email);
    return verification ? verification.verified : false;
  }
}

export default new SimpleEmailService();
