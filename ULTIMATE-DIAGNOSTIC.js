/**
 * DIAGNOSTIC ULTIME - Identifier la source exacte des donn√©es
 * 
 * Ce script examine TOUTES les sources possibles de donn√©es
 */

console.log('üîç DIAGNOSTIC ULTIME - IDENTIFICATION DE LA SOURCE');
console.log('='.repeat(60));

// 1. V√©rifier localStorage
console.log('\nüì¶ LOCALSTORAGE:');
const localKeys = Object.keys(localStorage);
if (localKeys.length > 0) {
  localKeys.forEach(key => {
    const value = localStorage.getItem(key);
    try {
      const parsed = JSON.parse(value);
      if (Array.isArray(parsed)) {
        console.log(`- ${key}: ${parsed.length} √©l√©ments`);
        if (parsed.length > 0 && parsed[0].totalAmount) {
          console.log(`  üí∞ Total: ${parsed.reduce((sum, item) => sum + (item.totalAmount || 0), 0).toLocaleString('fr-FR')} FG`);
        }
      } else {
        console.log(`- ${key}: ${value.length} caract√®res`);
      }
    } catch {
      console.log(`- ${key}: ${value.length} caract√®res`);
    }
  });
} else {
  console.log('- Aucune donn√©e localStorage');
}

// 2. V√©rifier sessionStorage
console.log('\nüì¶ SESSIONSTORAGE:');
const sessionKeys = Object.keys(sessionStorage);
if (sessionKeys.length > 0) {
  sessionKeys.forEach(key => {
    const value = sessionStorage.getItem(key);
    console.log(`- ${key}: ${value.length} caract√®res`);
  });
} else {
  console.log('- Aucune donn√©e sessionStorage');
}

// 3. V√©rifier les cookies
console.log('\nüç™ COOKIES:');
const cookies = document.cookie;
if (cookies) {
  console.log(`- Cookies pr√©sents: ${cookies.length} caract√®res`);
  console.log(`- Contenu: ${cookies}`);
} else {
  console.log('- Aucun cookie');
}

// 4. Tester les endpoints API
console.log('\nüåê TEST DES ENDPOINTS API:');
async function testAPI() {
  const baseUrl = window.location.origin;
  
  try {
    // Test des statistiques
    const statsResponse = await fetch(`${baseUrl}/api/orders/stats`);
    const statsData = await statsResponse.json();
    console.log(`üìä /api/orders/stats:`, statsData);
    
    // Test des commandes
    const ordersResponse = await fetch(`${baseUrl}/api/orders?limit=5`);
    const ordersData = await ordersResponse.json();
    console.log(`üìã /api/orders:`, ordersData);
    
  } catch (error) {
    console.log(`‚ùå Erreur API: ${error.message}`);
  }
}

// 5. V√©rifier les fichiers JSON potentiels
console.log('\nüìÑ FICHIERS JSON POTENTIELS:');
const jsonFiles = [
  '/adminProducts.json',
  '/products-data.json',
  '/orders.json',
  '/sales.json',
  '/test-data.json'
];

jsonFiles.forEach(async (file) => {
  try {
    const response = await fetch(file);
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ ${file}: ${Array.isArray(data) ? data.length : 'Object'} √©l√©ments`);
    }
  } catch (error) {
    // Fichier n'existe pas ou erreur
  }
});

// 6. V√©rifier le cache du navigateur
console.log('\nüíæ CACHE DU NAVIGATEUR:');
if ('caches' in window) {
  caches.keys().then(function(names) {
    if (names.length > 0) {
      console.log(`- Caches trouv√©s: ${names.join(', ')}`);
      names.forEach(name => {
        caches.open(name).then(cache => {
          cache.keys().then(requests => {
            console.log(`  - ${name}: ${requests.length} entr√©es`);
          });
        });
      });
    } else {
      console.log('- Aucun cache trouv√©');
    }
  });
} else {
  console.log('- Cache API non disponible');
}

// 7. V√©rifier les variables globales
console.log('\nüåç VARIABLES GLOBALES:');
const globalVars = ['window.orders', 'window.products', 'window.sales', 'window.testData'];
globalVars.forEach(varName => {
  try {
    const value = eval(varName);
    if (value) {
      console.log(`- ${varName}: ${Array.isArray(value) ? value.length : 'Object'} √©l√©ments`);
    }
  } catch (error) {
    // Variable n'existe pas
  }
});

// Lancer les tests API
testAPI();

console.log('\n' + '='.repeat(60));
console.log('‚úÖ Diagnostic ultime termin√© !');
console.log('\nüí° Analysez les r√©sultats ci-dessus pour identifier');
console.log('   la source exacte des donn√©es de test.');
