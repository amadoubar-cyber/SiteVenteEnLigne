// Script de diagnostic imm√©diat pour le probl√®me de notifications et commandes
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç DIAGNOSTIC IMM√âDIAT - NOTIFICATIONS ET COMMANDES');
console.log('=' .repeat(60));

// Fonction pour v√©rifier l'√©tat actuel imm√©diatement
const diagnosticImmediat = () => {
  console.log('\nüìä √âTAT ACTUEL IMM√âDIAT:');
  
  // 1. V√©rifier les commandes
  const orders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
  console.log(`üì¶ Commandes dans localStorage: ${orders.length}`);
  
  if (orders.length > 0) {
    console.log('üìã D√©tails des commandes:');
    orders.forEach((order, index) => {
      console.log(`   ${index + 1}. ID: ${order._id}`);
      console.log(`      Tracking: ${order.trackingNumber}`);
      console.log(`      Statut: ${order.orderStatus}`);
      console.log(`      Utilisateur: ${order.user?.email || 'N/A'}`);
      console.log(`      Date: ${new Date(order.createdAt).toLocaleString()}`);
      console.log('      ---');
    });
  } else {
    console.log('‚ùå AUCUNE COMMANDE TROUV√âE dans localStorage');
  }
  
  // 2. V√©rifier les notifications client
  const clientNotifications = JSON.parse(localStorage.getItem('client_notifications') || '[]');
  console.log(`üîî Notifications client: ${clientNotifications.length}`);
  
  if (clientNotifications.length > 0) {
    console.log('üìã D√©tails des notifications:');
    clientNotifications.forEach((notification, index) => {
      console.log(`   ${index + 1}. ${notification.title}`);
      console.log(`      Message: ${notification.message}`);
      console.log(`      Type: ${notification.type}`);
      console.log(`      Lu: ${notification.read ? 'Oui' : 'Non'}`);
      console.log(`      Date: ${new Date(notification.createdAt || notification.timestamp).toLocaleString()}`);
      console.log('      ---');
    });
  } else {
    console.log('‚ùå AUCUNE NOTIFICATION CLIENT TROUV√âE');
  }
  
  // 3. V√©rifier les notifications admin
  const adminNotifications = JSON.parse(localStorage.getItem('admin_notifications') || '[]');
  console.log(`üîî Notifications admin: ${adminNotifications.length}`);
  
  // 4. V√©rifier l'utilisateur connect√©
  const token = localStorage.getItem('token');
  const userData = localStorage.getItem('user');
  console.log(`üë§ Token pr√©sent: ${token ? 'Oui' : 'Non'}`);
  console.log(`üë§ Donn√©es utilisateur: ${userData ? 'Oui' : 'Non'}`);
  
  if (userData) {
    try {
      const user = JSON.parse(userData);
      console.log(`üë§ Utilisateur: ${user.email} (${user.firstName} ${user.lastName})`);
    } catch (error) {
      console.error('‚ùå Erreur parsing user data:', error);
    }
  }
  
  return {
    orders,
    clientNotifications,
    adminNotifications,
    hasToken: !!token,
    hasUser: !!userData
  };
};

// Fonction pour cr√©er une commande de test imm√©diate
const creerCommandeTest = async () => {
  console.log('\nüß™ CR√âATION D\'UNE COMMANDE DE TEST:');
  
  try {
    // Importer l'API
    const { localOrdersAPI } = await import('./client/src/services/localOrdersAPI.js');
    
    const testOrder = {
      items: [
        {
          product: 'test-product-immediate',
          quantity: 1,
          price: 100000,
          name: 'Produit Test Imm√©diat',
          image: ''
        }
      ],
      shippingAddress: {
        firstName: 'Test',
        lastName: 'Imm√©diat',
        street: '123 Rue Test',
        city: 'Conakry',
        phone: '+224 123 456 789'
      },
      paymentMethod: 'mobile_money',
      notes: 'Test imm√©diat pour diagnostic',
      subtotal: 100000,
      tax: 0,
      total: 100000
    };

    console.log('üì¶ Cr√©ation de la commande...');
    const result = await localOrdersAPI.createOrder(testOrder);
    
    if (result.success) {
      console.log('‚úÖ Commande cr√©√©e avec succ√®s!');
      console.log('üìã D√©tails:', {
        id: result.data.order._id,
        trackingNumber: result.data.order.trackingNumber,
        status: result.data.order.orderStatus,
        user: result.data.order.user
      });
      
      // V√©rifier imm√©diatement apr√®s cr√©ation
      const orders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
      console.log(`üì¶ Commandes apr√®s cr√©ation: ${orders.length}`);
      
      return result.data.order._id;
    } else {
      console.error('‚ùå Erreur cr√©ation commande:', result.error);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    return null;
  }
};

// Fonction pour approuver une commande et v√©rifier les notifications
const approuverEtVerifier = async (orderId) => {
  console.log('\nüîî APPROBATION ET V√âRIFICATION DES NOTIFICATIONS:');
  
  try {
    const { localOrdersAPI } = await import('./client/src/services/localOrdersAPI.js');
    
    console.log(`üìã Approbation de la commande: ${orderId}`);
    
    // V√©rifier l'√©tat avant
    const notificationsAvant = JSON.parse(localStorage.getItem('client_notifications') || '[]');
    console.log(`üîî Notifications avant: ${notificationsAvant.length}`);
    
    // Approuver la commande
    const result = await localOrdersAPI.approveOrder(
      orderId, 
      'Test d\'approbation imm√©diat pour diagnostic'
    );
    
    if (result.success) {
      console.log('‚úÖ Commande approuv√©e avec succ√®s!');
      console.log('üìã Nouveau statut:', result.data.order.orderStatus);
      
      // Attendre un peu pour la propagation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // V√©rifier l'√©tat apr√®s
      const notificationsApres = JSON.parse(localStorage.getItem('client_notifications') || '[]');
      console.log(`üîî Notifications apr√®s: ${notificationsApres.length}`);
      
      if (notificationsApres.length > notificationsAvant.length) {
        console.log('üéâ SUCC√àS: Notifications g√©n√©r√©es!');
        const nouvellesNotifications = notificationsApres.slice(0, notificationsApres.length - notificationsAvant.length);
        nouvellesNotifications.forEach((notification, index) => {
          console.log(`   ${index + 1}. ${notification.title}`);
          console.log(`      ${notification.message}`);
        });
      } else {
        console.error('‚ùå √âCHEC: Aucune nouvelle notification g√©n√©r√©e!');
      }
      
      // V√©rifier les commandes
      const orders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
      const commande = orders.find(o => o._id === orderId);
      if (commande) {
        console.log('üìã Statut de la commande:', commande.orderStatus);
      }
      
      return true;
    } else {
      console.error('‚ùå Erreur approbation:', result.error);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    return false;
  }
};

// Fonction pour v√©rifier la navigation
const verifierNavigation = () => {
  console.log('\nüß≠ V√âRIFICATION DE LA NAVIGATION:');
  
  // V√©rifier l'URL actuelle
  console.log(`üìç URL actuelle: ${window.location.href}`);
  console.log(`üìç Path: ${window.location.pathname}`);
  
  // V√©rifier les liens de navigation
  const ordersLinks = document.querySelectorAll('a[href="/orders"], a[href="orders"]');
  console.log(`üîó Liens "Mes Commandes" trouv√©s: ${ordersLinks.length}`);
  
  ordersLinks.forEach((link, index) => {
    console.log(`   ${index + 1}. ${link.textContent.trim()} - ${link.href}`);
  });
  
  // V√©rifier si on peut naviguer vers /orders
  if (ordersLinks.length > 0) {
    console.log('‚úÖ Navigation vers /orders possible');
    console.log('üí° Cliquez sur un des liens ci-dessus pour aller √† "Mes Commandes"');
  } else {
    console.error('‚ùå AUCUN LIEN VERS /orders TROUV√â!');
  }
  
  return {
    currentUrl: window.location.href,
    currentPath: window.location.pathname,
    ordersLinksCount: ordersLinks.length
  };
};

// Fonction pour v√©rifier l'interface utilisateur
const verifierInterface = () => {
  console.log('\nüñ•Ô∏è V√âRIFICATION DE L\'INTERFACE:');
  
  // V√©rifier la cloche de notifications
  const notificationBells = document.querySelectorAll('[data-testid="notification-bell"], .notification-bell, button[aria-label*="notification"], svg[data-lucide="bell"]');
  console.log(`üîî Cloches de notifications trouv√©es: ${notificationBells.length}`);
  
  // V√©rifier les compteurs de notifications
  const notificationCounters = document.querySelectorAll('[class*="notification"], [class*="badge"], [class*="count"], .bg-red-500');
  console.log(`üî¢ Compteurs de notifications: ${notificationCounters.length}`);
  
  // V√©rifier les √©l√©ments de menu utilisateur
  const userMenus = document.querySelectorAll('[data-testid="user-menu"], .user-menu, [aria-label*="user"]');
  console.log(`üë§ Menus utilisateur: ${userMenus.length}`);
  
  return {
    notificationBells: notificationBells.length,
    notificationCounters: notificationCounters.length,
    userMenus: userMenus.length
  };
};

// Fonction principale de diagnostic
const diagnosticComplet = async () => {
  console.log('üöÄ D√âMARRAGE DU DIAGNOSTIC COMPLET...');
  
  // 1. Diagnostic imm√©diat
  console.log('\n' + '='.repeat(50));
  console.log('1Ô∏è‚É£ DIAGNOSTIC IMM√âDIAT');
  console.log('='.repeat(50));
  const etatActuel = diagnosticImmediat();
  
  // 2. V√©rifier la navigation
  console.log('\n' + '='.repeat(50));
  console.log('2Ô∏è‚É£ V√âRIFICATION DE LA NAVIGATION');
  console.log('='.repeat(50));
  const navState = verifierNavigation();
  
  // 3. V√©rifier l'interface
  console.log('\n' + '='.repeat(50));
  console.log('3Ô∏è‚É£ V√âRIFICATION DE L\'INTERFACE');
  console.log('='.repeat(50));
  const uiState = verifierInterface();
  
  // 4. Cr√©er une commande de test si n√©cessaire
  if (etatActuel.orders.length === 0) {
    console.log('\n' + '='.repeat(50));
    console.log('4Ô∏è‚É£ CR√âATION D\'UNE COMMANDE DE TEST');
    console.log('='.repeat(50));
    const orderId = await creerCommandeTest();
    
    if (orderId) {
      // 5. Approuver et v√©rifier les notifications
      console.log('\n' + '='.repeat(50));
      console.log('5Ô∏è‚É£ APPROBATION ET V√âRIFICATION');
      console.log('='.repeat(50));
      await approuverEtVerifier(orderId);
    }
  }
  
  // 6. R√©sum√© final
  console.log('\n' + '='.repeat(70));
  console.log('üìã R√âSUM√â DU DIAGNOSTIC');
  console.log('='.repeat(70));
  
  console.log('üîç R√©sultats:');
  console.log(`- Commandes trouv√©es: ${etatActuel.orders.length}`);
  console.log(`- Notifications client: ${etatActuel.clientNotifications.length}`);
  console.log(`- Liens navigation: ${navState.ordersLinksCount}`);
  console.log(`- Cloches notifications: ${uiState.notificationBells}`);
  console.log(`- Utilisateur connect√©: ${etatActuel.hasUser ? 'Oui' : 'Non'}`);
  
  if (etatActuel.orders.length === 0) {
    console.log('\n‚ùå PROBL√àME: Aucune commande trouv√©e!');
    console.log('üí° Solution: Cr√©ez une commande via le panier');
  } else if (etatActuel.clientNotifications.length === 0) {
    console.log('\n‚ùå PROBL√àME: Aucune notification client!');
    console.log('üí° Solution: Approuvez une commande en tant qu\'admin');
  } else if (navState.ordersLinksCount === 0) {
    console.log('\n‚ùå PROBL√àME: Lien "Mes Commandes" non trouv√©!');
    console.log('üí° Solution: V√©rifiez le menu utilisateur');
  } else {
    console.log('\n‚úÖ SYST√àME FONCTIONNEL!');
  }
  
  console.log('\nüí° Instructions pour tester manuellement:');
  console.log('1. Cr√©ez une commande via le panier');
  console.log('2. Connectez-vous en tant qu\'admin et approuvez la commande');
  console.log('3. Revenez en tant que client et v√©rifiez les notifications');
  console.log('4. Cliquez sur "Mes Commandes" dans le menu utilisateur');
};

// Exporter les fonctions
window.diagnosticImmediat = diagnosticImmediat;
window.creerCommandeTest = creerCommandeTest;
window.approuverEtVerifier = approuverEtVerifier;
window.verifierNavigation = verifierNavigation;
window.verifierInterface = verifierInterface;
window.diagnosticComplet = diagnosticComplet;

console.log('üîß Fonctions disponibles:');
console.log('- diagnosticImmediat() : Diagnostic imm√©diat');
console.log('- creerCommandeTest() : Cr√©er une commande de test');
console.log('- approuverEtVerifier(orderId) : Approuver et v√©rifier');
console.log('- verifierNavigation() : V√©rifier la navigation');
console.log('- verifierInterface() : V√©rifier l\'interface');
console.log('- diagnosticComplet() : Diagnostic complet');

// Ex√©cuter automatiquement
diagnosticComplet();
