/**
 * üß™ SCRIPT DE TEST - BOUTON DE MODIFICATION TABLEAU DE BORD
 * 
 * Ce script teste la fonctionnalit√© de modification du tableau de bord admin
 * 
 * Instructions d'utilisation :
 * 1. Ouvrez la console du navigateur (F12)
 * 2. Copiez et collez ce script
 * 3. Ex√©cutez les tests
 */

console.log('üß™ D√âMARRAGE DES TESTS - BOUTON DE MODIFICATION TABLEAU DE BORD');
console.log('='.repeat(60));

// Test 1: V√©rifier la pr√©sence du bouton de modification
function testBoutonModification() {
  console.log('\nüìã TEST 1: V√©rification du bouton de modification');
  
  const boutonModifier = document.querySelector('button[class*="bg-green-600"]');
  const texteModifier = boutonModifier?.textContent?.includes('Modifier');
  
  if (boutonModifier && texteModifier) {
    console.log('‚úÖ Bouton "Modifier" trouv√© et visible');
    return true;
  } else {
    console.log('‚ùå Bouton "Modifier" non trouv√©');
    return false;
  }
}

// Test 2: V√©rifier les champs d'√©dition
function testChampsEdition() {
  console.log('\nüìã TEST 2: V√©rification des champs d\'√©dition');
  
  // Cliquer sur le bouton modifier
  const boutonModifier = document.querySelector('button[class*="bg-green-600"]');
  if (boutonModifier) {
    boutonModifier.click();
    
    // Attendre un peu pour que l'interface se mette √† jour
    setTimeout(() => {
      const champsInput = document.querySelectorAll('input[type="number"]');
      
      if (champsInput.length >= 4) {
        console.log('‚úÖ Champs d\'√©dition trouv√©s:', champsInput.length);
        
        // V√©rifier chaque champ
        champsInput.forEach((input, index) => {
          const label = input.closest('.bg-white').querySelector('.text-gray-600')?.textContent;
          console.log(`   - Champ ${index + 1}: ${label} (valeur: ${input.value})`);
        });
        
        return true;
      } else {
        console.log('‚ùå Champs d\'√©dition non trouv√©s');
        return false;
      }
    }, 500);
  }
  
  return false;
}

// Test 3: Tester la modification des valeurs
function testModificationValeurs() {
  console.log('\nüìã TEST 3: Test de modification des valeurs');
  
  const champsInput = document.querySelectorAll('input[type="number"]');
  
  if (champsInput.length >= 4) {
    // Modifier les valeurs
    const nouvellesValeurs = [100, 5000000, 25, 15];
    
    champsInput.forEach((input, index) => {
      if (nouvellesValeurs[index]) {
        input.value = nouvellesValeurs[index];
        input.dispatchEvent(new Event('input', { bubbles: true }));
        console.log(`‚úÖ Valeur ${index + 1} modifi√©e: ${nouvellesValeurs[index]}`);
      }
    });
    
    return true;
  } else {
    console.log('‚ùå Impossible de modifier les valeurs');
    return false;
  }
}

// Test 4: Tester la sauvegarde
function testSauvegarde() {
  console.log('\nüìã TEST 4: Test de sauvegarde');
  
  const boutonSauvegarder = document.querySelector('button[class*="bg-green-600"]');
  
  if (boutonSauvegarder && boutonSauvegarder.textContent.includes('Sauvegarder')) {
    console.log('‚úÖ Bouton "Sauvegarder" trouv√©');
    
    // Cliquer sur sauvegarder
    boutonSauvegarder.click();
    
    // V√©rifier que les donn√©es sont sauvegard√©es
    setTimeout(() => {
      const dashboardData = localStorage.getItem('adminDashboardData');
      if (dashboardData) {
        const data = JSON.parse(dashboardData);
        console.log('‚úÖ Donn√©es sauvegard√©es:', data);
        return true;
      } else {
        console.log('‚ùå Donn√©es non sauvegard√©es');
        return false;
      }
    }, 1000);
    
    return true;
  } else {
    console.log('‚ùå Bouton "Sauvegarder" non trouv√©');
    return false;
  }
}

// Test 5: V√©rifier l'annulation
function testAnnulation() {
  console.log('\nüìã TEST 5: Test d\'annulation');
  
  // Cliquer sur modifier pour revenir en mode √©dition
  const boutonModifier = document.querySelector('button[class*="bg-green-600"]');
  if (boutonModifier && boutonModifier.textContent.includes('Modifier')) {
    boutonModifier.click();
    
    setTimeout(() => {
      const boutonAnnuler = document.querySelector('button[class*="bg-gray-600"]');
      
      if (boutonAnnuler && boutonAnnuler.textContent.includes('Annuler')) {
        console.log('‚úÖ Bouton "Annuler" trouv√©');
        
        // Cliquer sur annuler
        boutonAnnuler.click();
        
        setTimeout(() => {
          const champsInput = document.querySelectorAll('input[type="number"]');
          if (champsInput.length === 0) {
            console.log('‚úÖ Mode √©dition annul√© avec succ√®s');
            return true;
          } else {
            console.log('‚ùå Mode √©dition toujours actif');
            return false;
          }
        }, 500);
        
        return true;
      } else {
        console.log('‚ùå Bouton "Annuler" non trouv√©');
        return false;
      }
    }, 500);
  }
  
  return false;
}

// Fonction principale de test
function executerTests() {
  console.log('\nüöÄ EX√âCUTION DES TESTS...');
  
  const tests = [
    { nom: 'Bouton Modification', fonction: testBoutonModification },
    { nom: 'Champs √âdition', fonction: testChampsEdition },
    { nom: 'Modification Valeurs', fonction: testModificationValeurs },
    { nom: 'Sauvegarde', fonction: testSauvegarde },
    { nom: 'Annulation', fonction: testAnnulation }
  ];
  
  let testsReussis = 0;
  
  tests.forEach((test, index) => {
    console.log(`\n‚è≥ Test ${index + 1}/5: ${test.nom}`);
    
    try {
      const resultat = test.fonction();
      if (resultat) {
        testsReussis++;
        console.log(`‚úÖ Test ${index + 1} r√©ussi`);
      } else {
        console.log(`‚ùå Test ${index + 1} √©chou√©`);
      }
    } catch (error) {
      console.log(`‚ùå Test ${index + 1} erreur:`, error.message);
    }
  });
  
  console.log('\n' + '='.repeat(60));
  console.log(`üìä R√âSULTATS: ${testsReussis}/${tests.length} tests r√©ussis`);
  
  if (testsReussis === tests.length) {
    console.log('üéâ TOUS LES TESTS SONT PASS√âS ! Le bouton de modification fonctionne parfaitement !');
  } else {
    console.log('‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.');
  }
}

// Fonction de v√©rification rapide
function verificationRapide() {
  console.log('\nüîç V√âRIFICATION RAPIDE');
  
  const boutonModifier = document.querySelector('button[class*="bg-green-600"]');
  const champsInput = document.querySelectorAll('input[type="number"]');
  const boutonSauvegarder = document.querySelector('button[class*="bg-green-600"]');
  const boutonAnnuler = document.querySelector('button[class*="bg-gray-600"]');
  
  console.log('√âl√©ments trouv√©s:');
  console.log(`- Bouton Modifier: ${boutonModifier ? '‚úÖ' : '‚ùå'}`);
  console.log(`- Champs d'√©dition: ${champsInput.length} (attendu: 4)`);
  console.log(`- Bouton Sauvegarder: ${boutonSauvegarder ? '‚úÖ' : '‚ùå'}`);
  console.log(`- Bouton Annuler: ${boutonAnnuler ? '‚úÖ' : '‚ùå'}`);
  
  const dashboardData = localStorage.getItem('adminDashboardData');
  console.log(`- Donn√©es sauvegard√©es: ${dashboardData ? '‚úÖ' : '‚ùå'}`);
  
  if (dashboardData) {
    const data = JSON.parse(dashboardData);
    console.log('Donn√©es actuelles:', data);
  }
}

// Instructions d'utilisation
console.log('\nüìñ INSTRUCTIONS D\'UTILISATION:');
console.log('1. Assurez-vous d\'√™tre sur la page du tableau de bord admin (/admin)');
console.log('2. Ex√©cutez: executerTests() pour tous les tests');
console.log('3. Ex√©cutez: verificationRapide() pour une v√©rification rapide');
console.log('4. Les tests vont automatiquement cliquer sur les boutons et v√©rifier les fonctionnalit√©s');

// Ex√©cuter automatiquement la v√©rification rapide
setTimeout(() => {
  verificationRapide();
}, 1000);

console.log('\n‚ú® Script de test charg√© ! Utilisez executerTests() pour commencer.');
