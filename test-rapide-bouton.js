/**
 * üöÄ SCRIPT DE TEST RAPIDE - BOUTON DE MODIFICATION
 * 
 * Ce script teste rapidement la pr√©sence et la fonctionnalit√© du bouton de modification
 */

console.log('üöÄ TEST RAPIDE - BOUTON DE MODIFICATION');
console.log('='.repeat(40));

// Test 1: V√©rifier la pr√©sence du bouton
function testPresenceBouton() {
  console.log('\nüìã Test 1: Pr√©sence du bouton');
  
  // Chercher le bouton dans le header
  const boutonHeader = document.querySelector('.flex.items-center.space-x-3 button[class*="bg-green-600"]');
  
  // Chercher le bouton flottant
  const boutonFlottant = document.querySelector('.fixed.top-4.right-4 button[class*="bg-green-600"]');
  
  if (boutonHeader) {
    console.log('‚úÖ Bouton trouv√© dans le header');
    return boutonHeader;
  } else if (boutonFlottant) {
    console.log('‚úÖ Bouton flottant trouv√©');
    return boutonFlottant;
  } else {
    console.log('‚ùå Aucun bouton de modification trouv√©');
    return null;
  }
}

// Test 2: Cliquer sur le bouton
function testClicBouton() {
  console.log('\nüìã Test 2: Clic sur le bouton');
  
  const bouton = testPresenceBouton();
  
  if (bouton) {
    console.log('üñ±Ô∏è Clic sur le bouton...');
    bouton.click();
    
    setTimeout(() => {
      const champsInput = document.querySelectorAll('input[type="number"]');
      if (champsInput.length > 0) {
        console.log(`‚úÖ Mode √©dition activ√© - ${champsInput.length} champs d'√©dition trouv√©s`);
        return true;
      } else {
        console.log('‚ùå Mode √©dition non activ√©');
        return false;
      }
    }, 500);
    
    return true;
  } else {
    console.log('‚ùå Impossible de cliquer - bouton non trouv√©');
    return false;
  }
}

// Test 3: V√©rifier les champs d'√©dition
function testChampsEdition() {
  console.log('\nüìã Test 3: Champs d\'√©dition');
  
  const champsInput = document.querySelectorAll('input[type="number"]');
  
  if (champsInput.length >= 4) {
    console.log(`‚úÖ ${champsInput.length} champs d'√©dition trouv√©s`);
    
    // Lister les champs
    champsInput.forEach((input, index) => {
      const carte = input.closest('.bg-white.rounded-lg.shadow-sm.border.p-6');
      const label = carte?.querySelector('.text-gray-600')?.textContent || `Champ ${index + 1}`;
      console.log(`   - ${label}: ${input.value}`);
    });
    
    return true;
  } else {
    console.log(`‚ùå Seulement ${champsInput.length} champs trouv√©s (attendu: 4)`);
    return false;
  }
}

// Test 4: Modifier une valeur
function testModificationValeur() {
  console.log('\nüìã Test 4: Modification d\'une valeur');
  
  const champsInput = document.querySelectorAll('input[type="number"]');
  
  if (champsInput.length > 0) {
    const premierChamp = champsInput[0];
    const ancienneValeur = premierChamp.value;
    const nouvelleValeur = '999';
    
    premierChamp.value = nouvelleValeur;
    premierChamp.dispatchEvent(new Event('input', { bubbles: true }));
    
    console.log(`‚úÖ Valeur modifi√©e: ${ancienneValeur} -> ${nouvelleValeur}`);
    return true;
  } else {
    console.log('‚ùå Aucun champ d\'√©dition trouv√©');
    return false;
  }
}

// Test 5: V√©rifier les boutons de sauvegarde/annulation
function testBoutonsSauvegarde() {
  console.log('\nüìã Test 5: Boutons de sauvegarde/annulation');
  
  const boutonSauvegarder = document.querySelector('button[class*="bg-green-600"]');
  const boutonAnnuler = document.querySelector('button[class*="bg-gray-600"]');
  
  if (boutonSauvegarder && boutonSauvegarder.textContent.includes('Sauvegarder')) {
    console.log('‚úÖ Bouton "Sauvegarder" trouv√©');
  } else {
    console.log('‚ùå Bouton "Sauvegarder" non trouv√©');
  }
  
  if (boutonAnnuler && boutonAnnuler.textContent.includes('Annuler')) {
    console.log('‚úÖ Bouton "Annuler" trouv√©');
  } else {
    console.log('‚ùå Bouton "Annuler" non trouv√©');
  }
  
  return boutonSauvegarder && boutonAnnuler;
}

// Fonction principale de test
function executerTestRapide() {
  console.log('\nüöÄ D√âMARRAGE DU TEST RAPIDE...');
  
  const tests = [
    { nom: 'Pr√©sence Bouton', fonction: testPresenceBouton },
    { nom: 'Clic Bouton', fonction: testClicBouton },
    { nom: 'Champs √âdition', fonction: testChampsEdition },
    { nom: 'Modification Valeur', fonction: testModificationValeur },
    { nom: 'Boutons Sauvegarde', fonction: testBoutonsSauvegarde }
  ];
  
  let testsReussis = 0;
  
  tests.forEach((test, index) => {
    console.log(`\n‚è≥ Test ${index + 1}/5: ${test.nom}`);
    
    try {
      const resultat = test.fonction();
      if (resultat) {
        testsReussis++;
        console.log(`‚úÖ Test ${index + 1} r√©ussi`);
      } else {
        console.log(`‚ùå Test ${index + 1} √©chou√©`);
      }
    } catch (error) {
      console.log(`‚ùå Test ${index + 1} erreur:`, error.message);
    }
  });
  
  console.log('\n' + '='.repeat(40));
  console.log(`üìä R√âSULTATS: ${testsReussis}/${tests.length} tests r√©ussis`);
  
  if (testsReussis === tests.length) {
    console.log('üéâ TOUS LES TESTS SONT PASS√âS ! Le bouton de modification fonctionne parfaitement !');
  } else if (testsReussis >= 3) {
    console.log('‚ö†Ô∏è  La plupart des tests sont pass√©s. Le bouton fonctionne partiellement.');
  } else {
    console.log('‚ùå La plupart des tests ont √©chou√©. Le bouton ne fonctionne pas correctement.');
  }
}

// Fonction de v√©rification imm√©diate
function verifierMaintenant() {
  console.log('\nüîç V√âRIFICATION IMM√âDIATE');
  
  const boutonHeader = document.querySelector('.flex.items-center.space-x-3 button[class*="bg-green-600"]');
  const boutonFlottant = document.querySelector('.fixed.top-4.right-4 button[class*="bg-green-600"]');
  const champsInput = document.querySelectorAll('input[type="number"]');
  
  console.log('√âl√©ments visibles:');
  console.log(`- Bouton dans header: ${boutonHeader ? '‚úÖ' : '‚ùå'}`);
  console.log(`- Bouton flottant: ${boutonFlottant ? '‚úÖ' : '‚ùå'}`);
  console.log(`- Champs d'√©dition: ${champsInput.length}`);
  
  if (boutonHeader || boutonFlottant) {
    console.log('\n‚úÖ LE BOUTON DE MODIFICATION EST VISIBLE !');
    console.log('Cliquez dessus pour commencer √† modifier les statistiques.');
  } else {
    console.log('\n‚ùå LE BOUTON DE MODIFICATION N\'EST PAS VISIBLE');
    console.log('Ex√©cutez: executerTestRapide() pour diagnostiquer le probl√®me');
  }
}

// Instructions
console.log('\nüìñ INSTRUCTIONS:');
console.log('1. verifierMaintenant() - V√©rification imm√©diate');
console.log('2. executerTestRapide() - Test complet');
console.log('3. Le bouton devrait √™tre visible en haut √† droite du tableau de bord');

// Ex√©cuter la v√©rification imm√©diate
setTimeout(() => {
  verifierMaintenant();
}, 1000);

console.log('\n‚ú® Script de test rapide charg√© !');
