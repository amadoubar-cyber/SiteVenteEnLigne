// Script pour nettoyer toutes les donn√©es de d√©mo du localStorage
// Ce script supprime d√©finitivement toutes les donn√©es de d√©monstration

console.log('üßπ D√©marrage du nettoyage des donn√©es de d√©mo...');

function cleanAllDemoData() {
    console.log('üîç Recherche des donn√©es de d√©mo...');
    
    // 1. Supprimer les cl√©s de d√©mo explicites
    const explicitDemoKeys = [
        'demoProducts',
        'demoSales',
        'demoOrders',
        'demoUsers',
        'demoStockMovements',
        'demoData',
        'testData',
        'sampleData',
        'exampleData'
    ];
    
    let removedCount = 0;
    explicitDemoKeys.forEach(key => {
        if (localStorage.getItem(key)) {
            localStorage.removeItem(key);
            console.log(`‚úÖ Cl√© ${key} supprim√©e`);
            removedCount++;
        }
    });
    
    // 2. Supprimer les cl√©s qui contiennent "demo", "test", "sample"
    const allKeys = Object.keys(localStorage);
    const demoKeys = allKeys.filter(key => 
        key.toLowerCase().includes('demo') ||
        key.toLowerCase().includes('test') ||
        key.toLowerCase().includes('sample') ||
        key.toLowerCase().includes('exemple') ||
        key.toLowerCase().includes('temp_') ||
        key.toLowerCase().includes('cache_') ||
        key.toLowerCase().includes('backup_')
    );
    
    demoKeys.forEach(key => {
        localStorage.removeItem(key);
        console.log(`‚úÖ Cl√© ${key} supprim√©e`);
        removedCount++;
    });
    
    // 3. Nettoyer les donn√©es r√©guli√®res des √©l√©ments de test
    const regularKeys = [
        'koula_products',
        'salesData',
        'ordersData',
        'users',
        'stockMovements',
        'debts',
        'categories'
    ];
    
    regularKeys.forEach(key => {
        const value = localStorage.getItem(key);
        if (value) {
            try {
                const parsed = JSON.parse(value);
                if (Array.isArray(parsed)) {
                    // Filtrer les √©l√©ments de test/d√©mo
                    const cleanedData = parsed.filter(item => {
                        if (!item.name) return true;
                        
                        const name = item.name.toLowerCase();
                        return !(
                            name.includes('test') ||
                            name.includes('demo') ||
                            name.includes('exemple') ||
                            name.includes('sample') ||
                            name.includes('d√©monstration') ||
                            name.includes('exemple')
                        );
                    });
                    
                    if (cleanedData.length !== parsed.length) {
                        localStorage.setItem(key, JSON.stringify(cleanedData));
                        console.log(`‚úÖ ${parsed.length - cleanedData.length} √©l√©ments de test supprim√©s de ${key}`);
                        removedCount++;
                    }
                }
            } catch (e) {
                console.log(`‚ùå Erreur lors du nettoyage de ${key}:`, e.message);
            }
        }
    });
    
    console.log(`üéâ Nettoyage termin√©: ${removedCount} √©l√©ments supprim√©s`);
    return removedCount;
}

function verifyCleanState() {
    console.log('üîç V√©rification de l\'√©tat propre...');
    
    // V√©rifier qu'il n'y a plus de donn√©es de d√©mo
    const allKeys = Object.keys(localStorage);
    const remainingDemoKeys = allKeys.filter(key => 
        key.toLowerCase().includes('demo') ||
        key.toLowerCase().includes('test') ||
        key.toLowerCase().includes('sample') ||
        key.toLowerCase().includes('exemple')
    );
    
    if (remainingDemoKeys.length === 0) {
        console.log('‚úÖ √âtat propre confirm√© - Aucune donn√©e de d√©mo d√©tect√©e');
        return true;
    } else {
        console.log('‚ö†Ô∏è  Donn√©es de d√©mo restantes:', remainingDemoKeys);
        return false;
    }
}

// Exporter les fonctions pour utilisation manuelle
if (typeof window !== 'undefined') {
    window.cleanDemoData = {
        cleanAll: cleanAllDemoData,
        verify: verifyCleanState
    };
    
    // Ex√©cuter automatiquement le nettoyage
    const removedCount = cleanAllDemoData();
    
    if (removedCount > 0) {
        console.log('üßπ Nettoyage automatique effectu√©');
        setTimeout(() => {
            verifyCleanState();
        }, 1000);
    } else {
        console.log('‚úÖ Aucune donn√©e de d√©mo trouv√©e');
    }
}

// Exporter pour Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        cleanAllDemoData,
        verifyCleanState
    };
}
