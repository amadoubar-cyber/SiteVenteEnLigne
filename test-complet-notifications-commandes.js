// Script de test complet pour v√©rifier les notifications client et l'espace commandes
// √Ä ex√©cuter dans la console du navigateur

console.log('üîî TEST COMPLET - NOTIFICATIONS CLIENT ET ESPACE COMMANDES');
console.log('=' .repeat(70));

// Fonction pour v√©rifier l'√©tat actuel
const checkCurrentState = () => {
  console.log('\nüìä √âTAT ACTUEL DU SYST√àME:');
  
  // V√©rifier les commandes
  const orders = JSON.parse(localStorage.getItem('clientOrders') || '[]');
  console.log(`üì¶ Commandes totales: ${orders.length}`);
  
  const statusCounts = orders.reduce((acc, order) => {
    acc[order.orderStatus] = (acc[order.orderStatus] || 0) + 1;
    return acc;
  }, {});
  
  console.log('üìä R√©partition par statut:');
  Object.entries(statusCounts).forEach(([status, count]) => {
    console.log(`   ${status}: ${count}`);
  });
  
  // V√©rifier les notifications client
  const clientNotifications = JSON.parse(localStorage.getItem('client_notifications') || '[]');
  console.log(`üîî Notifications client: ${clientNotifications.length}`);
  
  const unreadClientNotifications = clientNotifications.filter(n => !n.read);
  console.log(`üîî Notifications non lues: ${unreadClientNotifications.length}`);
  
  // V√©rifier les notifications admin
  const adminNotifications = JSON.parse(localStorage.getItem('admin_notifications') || '[]');
  console.log(`üîî Notifications admin: ${adminNotifications.length}`);
  
  return {
    orders,
    clientNotifications,
    unreadClientNotifications,
    adminNotifications
  };
};

// Fonction pour cr√©er une commande de test
const createTestOrder = async () => {
  try {
    const { localOrdersAPI } = await import('./client/src/services/localOrdersAPI.js');
    
    const testOrder = {
      items: [
        {
          product: 'test-product-final',
          quantity: 1,
          price: 200000,
          name: 'Produit Test Final',
          image: ''
        }
      ],
      shippingAddress: {
        firstName: 'Test',
        lastName: 'Final',
        street: '123 Rue Test',
        city: 'Conakry',
        phone: '+224 123 456 789'
      },
      paymentMethod: 'mobile_money',
      notes: 'Test final - notifications et commandes',
      subtotal: 200000,
      tax: 0,
      total: 200000
    };

    const result = await localOrdersAPI.createOrder(testOrder);
    
    if (result.success) {
      console.log('‚úÖ Commande de test cr√©√©e:', result.data.order._id);
      console.log('üìã D√©tails:', {
        id: result.data.order._id,
        trackingNumber: result.data.order.trackingNumber,
        status: result.data.order.orderStatus,
        user: result.data.order.user
      });
      return result.data.order._id;
    } else {
      console.error('‚ùå Erreur cr√©ation commande:', result.error);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    return null;
  }
};

// Fonction pour approuver une commande et v√©rifier les notifications
const approveOrderAndCheckNotifications = async (orderId) => {
  try {
    const { localOrdersAPI } = await import('./client/src/services/localOrdersAPI.js');
    
    console.log('\nüîî Approbation de la commande:', orderId);
    
    const result = await localOrdersAPI.approveOrder(
      orderId, 
      'Test d\'approbation final pour v√©rifier les notifications'
    );
    
    if (result.success) {
      console.log('‚úÖ Commande approuv√©e avec succ√®s');
      console.log('üìã Nouveau statut:', result.data.order.orderStatus);
      
      // Attendre un peu pour la propagation des √©v√©nements
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // V√©rifier les notifications apr√®s approbation
      const clientNotifications = JSON.parse(localStorage.getItem('client_notifications') || '[]');
      const unreadNotifications = clientNotifications.filter(n => !n.read);
      
      console.log('üîî Notifications apr√®s approbation:');
      console.log(`   Total: ${clientNotifications.length}`);
      console.log(`   Non lues: ${unreadNotifications.length}`);
      
      if (unreadNotifications.length > 0) {
        console.log('‚úÖ Notifications g√©n√©r√©es avec succ√®s!');
        unreadNotifications.forEach((notification, index) => {
          console.log(`   ${index + 1}. ${notification.title} - ${notification.message}`);
        });
      } else {
        console.error('‚ùå Aucune notification g√©n√©r√©e!');
      }
      
      return true;
    } else {
      console.error('‚ùå Erreur approbation:', result.error);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    return false;
  }
};

// Fonction pour v√©rifier l'interface utilisateur
const checkUIElements = () => {
  console.log('\nüñ•Ô∏è V√âRIFICATION DE L\'INTERFACE UTILISATEUR:');
  
  // V√©rifier si le lien "Mes Commandes" existe
  const ordersLink = document.querySelector('a[href="/orders"]');
  if (ordersLink) {
    console.log('‚úÖ Lien "Mes Commandes" trouv√© dans la navigation');
  } else {
    console.error('‚ùå Lien "Mes Commandes" non trouv√©');
  }
  
  // V√©rifier la cloche de notifications
  const notificationBell = document.querySelector('[data-testid="notification-bell"], .notification-bell, button[aria-label*="notification"]');
  if (notificationBell) {
    console.log('‚úÖ Cloche de notifications trouv√©e');
  } else {
    console.log('‚ö†Ô∏è Cloche de notifications non trouv√©e (peut √™tre normale)');
  }
  
  // V√©rifier les compteurs de notifications
  const notificationCounters = document.querySelectorAll('[class*="notification"], [class*="badge"], [class*="count"]');
  console.log(`üîî √âl√©ments de compteur trouv√©s: ${notificationCounters.length}`);
  
  return {
    ordersLink: !!ordersLink,
    notificationBell: !!notificationBell,
    counters: notificationCounters.length
  };
};

// Fonction pour tester la navigation
const testNavigation = () => {
  console.log('\nüß≠ TEST DE NAVIGATION:');
  
  // V√©rifier les routes disponibles
  const currentPath = window.location.pathname;
  console.log(`üìç Page actuelle: ${currentPath}`);
  
  // V√©rifier si on peut naviguer vers /orders
  const ordersLink = document.querySelector('a[href="/orders"]');
  if (ordersLink) {
    console.log('‚úÖ Navigation vers /orders possible');
    
    // Simuler un clic (optionnel)
    console.log('üí° Pour tester: cliquez sur le lien "Mes Commandes" dans le menu utilisateur');
  } else {
    console.error('‚ùå Impossible de naviguer vers /orders - lien non trouv√©');
  }
  
  return {
    currentPath,
    canNavigateToOrders: !!ordersLink
  };
};

// Fonction pour surveiller les √©v√©nements en temps r√©el
const monitorEvents = () => {
  console.log('\nüëÅÔ∏è SURVEILLANCE DES √âV√âNEMENTS EN TEMPS R√âEL:');
  
  let eventCount = 0;
  
  const eventTypes = ['orderApproved', 'orderRejected', 'newOrderCreated'];
  
  eventTypes.forEach(eventType => {
    const handler = (event) => {
      eventCount++;
      console.log(`üîî √âv√©nement ${eventType} #${eventCount}:`, event.detail);
    };
    
    window.addEventListener(eventType, handler);
    console.log(`‚úÖ √âcoute activ√©e pour: ${eventType}`);
  });
  
  console.log('üëÅÔ∏è Surveillance active - tous les √©v√©nements seront logg√©s');
  
  return () => {
    eventTypes.forEach(eventType => {
      window.removeEventListener(eventType, handler);
    });
    console.log('üõë Surveillance arr√™t√©e');
  };
};

// Fonction principale de test
const runCompleteTest = async () => {
  console.log('üöÄ D√âMARRAGE DU TEST COMPLET...');
  
  // 1. V√©rifier l'√©tat initial
  console.log('\n' + '='.repeat(50));
  console.log('1Ô∏è‚É£ V√âRIFICATION DE L\'√âTAT INITIAL');
  console.log('='.repeat(50));
  const initialState = checkCurrentState();
  
  // 2. V√©rifier l'interface utilisateur
  console.log('\n' + '='.repeat(50));
  console.log('2Ô∏è‚É£ V√âRIFICATION DE L\'INTERFACE UTILISATEUR');
  console.log('='.repeat(50));
  const uiState = checkUIElements();
  
  // 3. V√©rifier la navigation
  console.log('\n' + '='.repeat(50));
  console.log('3Ô∏è‚É£ V√âRIFICATION DE LA NAVIGATION');
  console.log('='.repeat(50));
  const navState = testNavigation();
  
  // 4. Activer la surveillance des √©v√©nements
  console.log('\n' + '='.repeat(50));
  console.log('4Ô∏è‚É£ SURVEILLANCE DES √âV√âNEMENTS');
  console.log('='.repeat(50));
  const stopMonitoring = monitorEvents();
  
  // 5. Cr√©er une commande de test
  console.log('\n' + '='.repeat(50));
  console.log('5Ô∏è‚É£ CR√âATION D\'UNE COMMANDE DE TEST');
  console.log('='.repeat(50));
  const orderId = await createTestOrder();
  
  if (orderId) {
    // 6. Approuver la commande et v√©rifier les notifications
    console.log('\n' + '='.repeat(50));
    console.log('6Ô∏è‚É£ APPROBATION ET V√âRIFICATION DES NOTIFICATIONS');
    console.log('='.repeat(50));
    const approved = await approveOrderAndCheckNotifications(orderId);
    
    if (approved) {
      // 7. V√©rification finale
      console.log('\n' + '='.repeat(50));
      console.log('7Ô∏è‚É£ V√âRIFICATION FINALE');
      console.log('='.repeat(50));
      const finalState = checkCurrentState();
      
      // 8. R√©sum√©
      console.log('\n' + '='.repeat(70));
      console.log('üìã R√âSUM√â DU TEST COMPLET');
      console.log('='.repeat(70));
      
      console.log('‚úÖ R√©sultats:');
      console.log(`- Commandes cr√©√©es: ${initialState.orders.length} ‚Üí ${finalState.orders.length}`);
      console.log(`- Notifications client: ${initialState.clientNotifications.length} ‚Üí ${finalState.clientNotifications.length}`);
      console.log(`- Notifications non lues: ${initialState.unreadClientNotifications.length} ‚Üí ${finalState.unreadClientNotifications.length}`);
      console.log(`- Interface utilisateur: ${uiState.ordersLink ? '‚úÖ' : '‚ùå'} Lien commandes, ${uiState.notificationBell ? '‚úÖ' : '‚ö†Ô∏è'} Cloche notifications`);
      console.log(`- Navigation: ${navState.canNavigateToOrders ? '‚úÖ' : '‚ùå'} Vers /orders`);
      
      if (finalState.unreadClientNotifications.length > initialState.unreadClientNotifications.length) {
        console.log('üéâ SUCC√àS: Les notifications client fonctionnent!');
      } else {
        console.error('‚ùå √âCHEC: Les notifications client ne fonctionnent pas');
      }
    }
  }
  
  // Arr√™ter la surveillance
  setTimeout(() => {
    stopMonitoring();
  }, 10000);
  
  console.log('\nüí° Instructions pour tester manuellement:');
  console.log('1. Allez sur la page "Mes Commandes" (/orders)');
  console.log('2. V√©rifiez que vos commandes s\'affichent');
  console.log('3. V√©rifiez que les notifications apparaissent dans la cloche');
  console.log('4. Testez le bouton d\'actualisation');
  console.log('5. Testez le t√©l√©chargement de factures pour les commandes approuv√©es');
};

// Exporter les fonctions pour utilisation manuelle
window.checkCurrentState = checkCurrentState;
window.createTestOrder = createTestOrder;
window.approveOrderAndCheckNotifications = approveOrderAndCheckNotifications;
window.checkUIElements = checkUIElements;
window.testNavigation = testNavigation;
window.monitorEvents = monitorEvents;
window.runCompleteTest = runCompleteTest;

console.log('üîß Fonctions de test disponibles:');
console.log('- checkCurrentState() : V√©rifier l\'√©tat actuel');
console.log('- createTestOrder() : Cr√©er une commande de test');
console.log('- approveOrderAndCheckNotifications(orderId) : Approuver et v√©rifier notifications');
console.log('- checkUIElements() : V√©rifier l\'interface utilisateur');
console.log('- testNavigation() : Tester la navigation');
console.log('- monitorEvents() : Surveiller les √©v√©nements');
console.log('- runCompleteTest() : Ex√©cuter le test complet');

// Ex√©cuter automatiquement le test complet
runCompleteTest();
