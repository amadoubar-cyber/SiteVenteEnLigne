// Script de correction imm√©diate pour la page Construction
// √Ä ex√©cuter dans la console du navigateur

console.log('üö® CORRECTION IMM√âDIATE PAGE CONSTRUCTION');
console.log('=' .repeat(50));

// Fonction pour corriger imm√©diatement les produits de construction
const correctionImmediateConstruction = () => {
  console.log('\nüîß CORRECTION IMM√âDIATE DES PRODUITS DE CONSTRUCTION:');
  
  // 1. V√©rifier les produits existants
  const products = JSON.parse(localStorage.getItem('koula_products') || '[]');
  console.log(`üì¶ Produits existants: ${products.length}`);
  
  // 2. Corriger les produits existants
  let produitsModifies = 0;
  products.forEach(product => {
    const nomProduit = product.name?.toLowerCase() || '';
    
    // Identifier les produits de construction
    if (nomProduit.includes('fer') || nomProduit.includes('ciment') || nomProduit.includes('tole')) {
      if (!product.category || product.category !== 'construction') {
        product.category = 'construction';
        produitsModifies++;
      }
      if (!product.productType || product.productType !== 'construction') {
        product.productType = 'construction';
        produitsModifies++;
      }
      if (!product.unit) {
        product.unit = 'unit√©';
      }
    }
  });
  
  // 3. Cr√©er des produits de construction de test
  const produitsConstructionTest = [
    {
      _id: 'construction-1',
      name: 'Ciment Portland',
      description: 'Ciment de qualit√© sup√©rieure pour tous vos travaux de construction',
      price: 15000,
      category: 'construction',
      productType: 'construction',
      brand: 'Lafarge',
      stock: 100,
      unit: 'sac de 50kg',
      weight: 50,
      featured: true,
      images: [{ url: 'https://via.placeholder.com/300x300?text=Ciment', alt: 'Ciment' }],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    {
      _id: 'construction-2',
      name: 'Fer √† B√©ton 12mm',
      description: 'Armature en fer pour b√©ton arm√©, diam√®tre 12mm',
      price: 25000,
      category: 'construction',
      productType: 'construction',
      brand: 'ArcelorMittal',
      stock: 50,
      unit: 'barre de 12m',
      weight: 12,
      featured: true,
      images: [{ url: 'https://via.placeholder.com/300x300?text=Fer', alt: 'Fer' }],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    {
      _id: 'construction-3',
      name: 'T√¥le Galvanis√©e',
      description: 'T√¥le galvanis√©e pour toiture et construction',
      price: 45000,
      category: 'construction',
      productType: 'construction',
      brand: 'ArcelorMittal',
      stock: 25,
      unit: 'm¬≤',
      weight: 8,
      featured: false,
      images: [{ url: 'https://via.placeholder.com/300x300?text=Tole', alt: 'T√¥le' }],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
  ];
  
  // V√©rifier si les produits existent d√©j√†
  const produitsExistants = products.filter(p => p._id.startsWith('construction-'));
  
  if (produitsExistants.length === 0) {
    products.push(...produitsConstructionTest);
    console.log('‚úÖ 3 produits de construction cr√©√©s');
  } else {
    console.log('‚ÑπÔ∏è Produits de construction d√©j√† existants');
  }
  
  // 4. Sauvegarder
  localStorage.setItem('koula_products', JSON.stringify(products));
  
  console.log(`‚úÖ ${produitsModifies} propri√©t√©s modifi√©es`);
  console.log(`üì¶ Total produits: ${products.length}`);
  
  // 5. V√©rifier les produits de construction
  const produitsConstruction = products.filter(p => 
    p.category === 'construction' && p.productType === 'construction'
  );
  
  console.log(`üèóÔ∏è Produits de construction: ${produitsConstruction.length}`);
  produitsConstruction.forEach(p => {
    console.log(`  - ${p.name} (${p.price.toLocaleString('fr-FR')} GNF/${p.unit})`);
  });
  
  return produitsConstruction.length > 0;
};

// Fonction pour corriger le filtre de construction
const corrigerFiltreConstructionImmediate = () => {
  console.log('\nüîß CORRECTION IMM√âDIATE DU FILTRE DE CONSTRUCTION:');
  
  // Cr√©er un script pour corriger le filtre
  const script = document.createElement('script');
  script.textContent = `
    // Corriger le filtre de construction dans localProductsAPI
    if (window.localProductsAPI) {
      const originalGetProducts = window.localProductsAPI.getProducts;
      
      window.localProductsAPI.getProducts = async function(filters = {}) {
        console.log('üîç getProducts appel√© avec filtres:', filters);
        
        // Charger les produits
        const products = JSON.parse(localStorage.getItem('koula_products') || '[]');
        console.log(\`üì¶ \${products.length} produits charg√©s\`);
        
        // Filtrer les produits selon les crit√®res
        let filtered = [...products];
        
        // Filtrer par type de produit (construction)
        if (filters.productType === 'construction' || filters.productType === 'mat√©riau') {
          filtered = filtered.filter(product => 
            product.productType === 'construction' || 
            product.category === 'construction' ||
            product.productType === 'mat√©riau'
          );
          console.log(\`üèóÔ∏è Filtrage construction: \${filtered.length} produits\`);
        }
        
        // Filtrer par cat√©gorie
        if (filters.category) {
          filtered = filtered.filter(product => 
            product.category?.toLowerCase() === filters.category.toLowerCase()
          );
          console.log(\`üìã Filtrage cat√©gorie \${filters.category}: \${filtered.length} produits\`);
        }
        
        // Filtrer par recherche textuelle
        if (filters.search) {
          const searchTerm = filters.search.toLowerCase();
          filtered = filtered.filter(product => 
            product.name?.toLowerCase().includes(searchTerm) ||
            product.description?.toLowerCase().includes(searchTerm) ||
            product.brand?.toLowerCase().includes(searchTerm)
          );
          console.log(\`üîç Filtrage recherche "\${filters.search}": \${filtered.length} produits\`);
        }
        
        // Filtrer par marque
        if (filters.brand) {
          filtered = filtered.filter(product => 
            product.brand?.toLowerCase().includes(filters.brand.toLowerCase())
          );
          console.log(\`üè∑Ô∏è Filtrage marque \${filters.brand}: \${filtered.length} produits\`);
        }
        
        // Filtrer par prix minimum
        if (filters.minPrice) {
          filtered = filtered.filter(product => 
            product.price >= parseFloat(filters.minPrice)
          );
        }
        
        // Filtrer par prix maximum
        if (filters.maxPrice) {
          filtered = filtered.filter(product => 
            product.price <= parseFloat(filters.maxPrice)
          );
        }
        
        // Filtrer par produits vedettes
        if (filters.featured === 'true') {
          filtered = filtered.filter(product => product.featured === true);
        }
        
        // Trier les produits
        if (filters.sort) {
          const [sortField, sortOrder] = filters.sort.split('-');
          const order = sortOrder === 'desc' ? -1 : 1;
          
          filtered.sort((a, b) => {
            let aValue = a[sortField];
            let bValue = b[sortField];
            
            if (sortField === 'rating.average') {
              aValue = a.rating?.average || 0;
              bValue = b.rating?.average || 0;
            }
            
            if (typeof aValue === 'string') {
              aValue = aValue.toLowerCase();
              bValue = bValue.toLowerCase();
            }
            
            if (aValue < bValue) return -1 * order;
            if (aValue > bValue) return 1 * order;
            return 0;
          });
        }
        
        // Pagination
        const page = parseInt(filters.page) || 1;
        const limit = parseInt(filters.limit) || 12;
        const startIndex = (page - 1) * limit;
        const endIndex = startIndex + limit;
        
        const paginatedProducts = filtered.slice(startIndex, endIndex);
        
        const result = {
          products: paginatedProducts,
          pagination: {
            currentPage: page,
            totalPages: Math.ceil(filtered.length / limit),
            totalProducts: filtered.length,
            hasNext: endIndex < filtered.length,
            hasPrev: page > 1
          }
        };
        
        console.log(\`‚úÖ R√©sultat: \${paginatedProducts.length} produits sur \${filtered.length} total\`);
        return result;
      };
      
      console.log('‚úÖ Filtre de construction corrig√©');
    }
  `;
  
  document.head.appendChild(script);
  
  console.log('‚úÖ Filtre de construction corrig√© dans le code');
  return true;
};

// Fonction pour forcer le rechargement de la page
const forcerRechargementPage = () => {
  console.log('\nüîÑ FORCER LE RECHARGEMENT DE LA PAGE:');
  
  // Attendre un peu puis recharger
  setTimeout(() => {
    console.log('üîÑ Rechargement de la page...');
    window.location.reload();
  }, 1000);
  
  return true;
};

// Fonction principale
const correctionImmediateComplet = async () => {
  console.log('üö® D√âMARRAGE DE LA CORRECTION IMM√âDIATE...');
  
  // 1. Corriger les produits de construction
  console.log('\n' + '='.repeat(60));
  console.log('1Ô∏è‚É£ CORRECTION DES PRODUITS DE CONSTRUCTION');
  console.log('='.repeat(60));
  const produitsCorriges = correctionImmediateConstruction();
  
  // 2. Corriger le filtre de construction
  console.log('\n' + '='.repeat(60));
  console.log('2Ô∏è‚É£ CORRECTION DU FILTRE DE CONSTRUCTION');
  console.log('='.repeat(60));
  const filtreCorrige = corrigerFiltreConstructionImmediate();
  
  // 3. Forcer le rechargement
  console.log('\n' + '='.repeat(60));
  console.log('3Ô∏è‚É£ RECHARGEMENT DE LA PAGE');
  console.log('='.repeat(60));
  const rechargement = forcerRechargementPage();
  
  // 4. R√©sum√© final
  console.log('\n' + '='.repeat(80));
  console.log('üìã R√âSUM√â DE LA CORRECTION IMM√âDIATE');
  console.log('='.repeat(80));
  
  console.log('üîç R√©sultats:');
  console.log(`- Produits de construction corrig√©s: ${produitsCorriges ? '‚úÖ' : '‚ùå'}`);
  console.log(`- Filtre de construction corrig√©: ${filtreCorrige ? '‚úÖ' : '‚ùå'}`);
  console.log(`- Rechargement de la page: ${rechargement ? '‚úÖ' : '‚ùå'}`);
  
  console.log('\nüéâ CORRECTION IMM√âDIATE TERMIN√âE!');
  console.log('\nüí° Instructions:');
  console.log('1. La page va se recharger automatiquement');
  console.log('2. Vous devriez voir les produits de construction');
  console.log('3. Si cela ne fonctionne pas, actualisez manuellement (F5)');
  
  console.log('\nüîß Corrections apport√©es:');
  console.log('- ‚úÖ Produits de construction cr√©√©s (Ciment, Fer, T√¥le)');
  console.log('- ‚úÖ Produits existants corrig√©s (cat√©gorie et type)');
  console.log('- ‚úÖ Filtre de construction corrig√©');
  console.log('- ‚úÖ Rechargement automatique de la page');
  
  console.log('\n‚úÖ La page Construction devrait maintenant afficher les produits!');
};

// Exporter les fonctions
window.correctionImmediateConstruction = correctionImmediateConstruction;
window.corrigerFiltreConstructionImmediate = corrigerFiltreConstructionImmediate;
window.forcerRechargementPage = forcerRechargementPage;
window.correctionImmediateComplet = correctionImmediateComplet;

console.log('üîß Fonctions disponibles:');
console.log('- correctionImmediateConstruction() : Corriger les produits de construction');
console.log('- corrigerFiltreConstructionImmediate() : Corriger le filtre de construction');
console.log('- forcerRechargementPage() : Forcer le rechargement de la page');
console.log('- correctionImmediateComplet() : Correction imm√©diate compl√®te');

// Ex√©cuter automatiquement
correctionImmediateComplet();
