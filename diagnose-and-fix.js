// Script de diagnostic et correction
console.log('üîç Diagnostic de l\'application...');

// Fonction pour diagnostiquer les donn√©es
function diagnoseData() {
  console.log('üìä Diagnostic des donn√©es localStorage:');
  
  const keys = [
    'salesData', 'ordersData', 'adminOrders', 'revenueData', 'salesStats',
    'koula_products', 'adminProducts', 'productsData',
    'users', 'adminUsers', 'userData',
    'categories', 'adminCategories', 'categoryData'
  ];
  
  let totalItems = 0;
  keys.forEach(key => {
    const data = localStorage.getItem(key);
    if (data) {
      try {
        const parsed = JSON.parse(data);
        const count = Array.isArray(parsed) ? parsed.length : 'object';
        console.log(`  ‚úÖ ${key}: ${count} √©l√©ments`);
        totalItems++;
      } catch (e) {
        console.log(`  ‚ùå ${key}: donn√©es corrompues`);
      }
    } else {
      console.log(`  ‚ö™ ${key}: vide`);
    }
  });
  
  console.log(`üìà Total: ${totalItems} types de donn√©es trouv√©es`);
  return totalItems;
}

// Fonction pour nettoyer compl√®tement
function cleanAllData() {
  console.log('üßπ Nettoyage complet...');
  
  // Vider localStorage
  localStorage.clear();
  console.log('‚úÖ localStorage vid√©');
  
  // Vider sessionStorage
  sessionStorage.clear();
  console.log('‚úÖ sessionStorage vid√©');
  
  // Vider les cookies
  document.cookie.split(";").forEach(function(c) { 
    document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
  });
  console.log('‚úÖ Cookies vid√©s');
  
  console.log('üéâ Nettoyage termin√©');
}

// Fonction pour v√©rifier si les boutons sont pr√©sents
function checkResetButtons() {
  console.log('üîç V√©rification des boutons de r√©initialisation...');
  
  // Chercher les boutons ResetButton
  const resetButtons = document.querySelectorAll('[class*="reset-button"], [class*="ResetButton"]');
  console.log(`üìä Boutons ResetButton trouv√©s: ${resetButtons.length}`);
  
  // Chercher les boutons avec le texte "R√©initialiser"
  const resetTextButtons = Array.from(document.querySelectorAll('button')).filter(btn => 
    btn.textContent.includes('R√©initialiser') || btn.textContent.includes('r√©initialiser')
  );
  console.log(`üìä Boutons "R√©initialiser" trouv√©s: ${resetTextButtons.length}`);
  
  // Chercher les ic√¥nes de rotation
  const rotateIcons = document.querySelectorAll('[class*="RotateCcw"], [class*="rotate"]');
  console.log(`üìä Ic√¥nes de rotation trouv√©es: ${rotateIcons.length}`);
  
  return {
    resetButtons: resetButtons.length,
    resetTextButtons: resetTextButtons.length,
    rotateIcons: rotateIcons.length
  };
}

// Ex√©cuter le diagnostic
if (typeof window !== 'undefined') {
  console.log('üåê Ex√©cution dans le navigateur...');
  
  const dataCount = diagnoseData();
  const buttonInfo = checkResetButtons();
  
  console.log('üìã R√©sum√©:');
  console.log(`  - Donn√©es: ${dataCount} types trouv√©s`);
  console.log(`  - Boutons ResetButton: ${buttonInfo.resetButtons}`);
  console.log(`  - Boutons "R√©initialiser": ${buttonInfo.resetTextButtons}`);
  console.log(`  - Ic√¥nes rotation: ${buttonInfo.rotateIcons}`);
  
  if (dataCount > 0) {
    console.log('‚ö†Ô∏è Des donn√©es persistent - nettoyage recommand√©');
    console.log('üí° Ex√©cutez: cleanAllData() pour nettoyer');
  }
  
  if (buttonInfo.resetButtons === 0 && buttonInfo.resetTextButtons === 0) {
    console.log('‚ö†Ô∏è Aucun bouton de r√©initialisation trouv√©');
    console.log('üí° V√©rifiez que l\'application React est charg√©e');
  }
  
  // Exposer les fonctions globalement
  window.diagnoseData = diagnoseData;
  window.cleanAllData = cleanAllData;
  window.checkResetButtons = checkResetButtons;
  
} else {
  console.log('‚ö†Ô∏è Ce script doit √™tre ex√©cut√© dans le navigateur');
}

console.log('‚úÖ Diagnostic termin√©');
