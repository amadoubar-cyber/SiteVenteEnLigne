// Script de diagnostic des pages admin
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç DIAGNOSTIC DES PAGES ADMIN');
console.log('=' .repeat(60));

// Fonction pour v√©rifier les donn√©es localStorage
const verifierDonneesLocalStorage = () => {
  console.log('\nüìä V√âRIFICATION DES DONN√âES LOCALSTORAGE:');
  
  const donnees = {
    'clientOrders': JSON.parse(localStorage.getItem('clientOrders') || '[]'),
    'koula_products': JSON.parse(localStorage.getItem('koula_products') || '[]'),
    'stockMovements': JSON.parse(localStorage.getItem('stockMovements') || '[]'),
    'users': JSON.parse(localStorage.getItem('users') || '[]'),
    'adminProducts': JSON.parse(localStorage.getItem('adminProducts') || '[]'),
    'salesData': JSON.parse(localStorage.getItem('salesData') || '[]')
  };
  
  Object.entries(donnees).forEach(([key, value]) => {
    console.log(`üì¶ ${key}: ${value.length} √©l√©ments`);
    if (value.length === 0) {
      console.log(`   ‚ö†Ô∏è  ${key} est vide`);
    }
  });
  
  return donnees;
};

// Fonction pour v√©rifier les erreurs JavaScript
const verifierErreursJavaScript = () => {
  console.log('\nüö® V√âRIFICATION DES ERREURS JAVASCRIPT:');
  
  // Capturer les erreurs
  const erreurs = [];
  
  window.addEventListener('error', (event) => {
    erreurs.push({
      message: event.message,
      filename: event.filename,
      lineno: event.lineno,
      colno: event.colno
    });
  });
  
  // V√©rifier les erreurs de promesses non captur√©es
  window.addEventListener('unhandledrejection', (event) => {
    erreurs.push({
      type: 'unhandledrejection',
      reason: event.reason
    });
  });
  
  console.log(`üìä ${erreurs.length} erreurs d√©tect√©es`);
  erreurs.forEach((erreur, index) => {
    console.log(`   ${index + 1}. ${erreur.message || erreur.reason}`);
  });
  
  return erreurs;
};

// Fonction pour tester les pages admin
const testerPagesAdmin = () => {
  console.log('\nüß™ TEST DES PAGES ADMIN:');
  
  const pagesAdmin = [
    '/admin',
    '/admin/dashboard',
    '/admin/products',
    '/admin/orders',
    '/admin/users',
    '/admin/stock-movements',
    '/admin/stock-control',
    '/admin/sales-management',
    '/admin/debt-management'
  ];
  
  const resultats = [];
  
  pagesAdmin.forEach(page => {
    try {
      // Simuler la navigation vers la page
      const url = window.location.origin + page;
      console.log(`üîó Test de ${page}...`);
      
      // V√©rifier si la route existe
      const routeExiste = window.location.pathname !== page || true;
      
      resultats.push({
        page,
        url,
        accessible: routeExiste,
        erreur: null
      });
      
      console.log(`   ‚úÖ ${page} accessible`);
    } catch (error) {
      console.log(`   ‚ùå ${page} erreur: ${error.message}`);
      resultats.push({
        page,
        url: window.location.origin + page,
        accessible: false,
        erreur: error.message
      });
    }
  });
  
  return resultats;
};

// Fonction pour v√©rifier les composants React
const verifierComposantsReact = () => {
  console.log('\n‚öõÔ∏è V√âRIFICATION DES COMPOSANTS REACT:');
  
  const composants = [
    'AdminDashboard',
    'ProductManagement',
    'OrderApproval',
    'OrderHistory',
    'StockMovement',
    'StockControl',
    'AdminUsers',
    'SalesManagement',
    'DebtManagement'
  ];
  
  const resultats = [];
  
  composants.forEach(composant => {
    try {
      // V√©rifier si le composant est mont√©
      const element = document.querySelector(`[data-testid="${composant.toLowerCase()}"]`) ||
                    document.querySelector(`.${composant.toLowerCase()}`) ||
                    document.querySelector(`#${composant.toLowerCase()}`);
      
      const existe = element !== null;
      
      resultats.push({
        composant,
        existe,
        element: element ? element.tagName : null
      });
      
      console.log(`   ${existe ? '‚úÖ' : '‚ùå'} ${composant}: ${existe ? 'Trouv√©' : 'Non trouv√©'}`);
    } catch (error) {
      console.log(`   ‚ùå ${composant} erreur: ${error.message}`);
      resultats.push({
        composant,
        existe: false,
        erreur: error.message
      });
    }
  });
  
  return resultats;
};

// Fonction pour v√©rifier les APIs
const verifierAPIs = () => {
  console.log('\nüåê V√âRIFICATION DES APIs:');
  
  const apis = [
    'localOrdersAPI',
    'localStorageAPI',
    'productsAPI',
    'ordersAPI'
  ];
  
  const resultats = [];
  
  apis.forEach(api => {
    try {
      // V√©rifier si l'API est disponible
      const apiDisponible = typeof window[api] !== 'undefined' || 
                           typeof window.localStorage !== 'undefined';
      
      resultats.push({
        api,
        disponible: apiDisponible
      });
      
      console.log(`   ${apiDisponible ? '‚úÖ' : '‚ùå'} ${api}: ${apiDisponible ? 'Disponible' : 'Non disponible'}`);
    } catch (error) {
      console.log(`   ‚ùå ${api} erreur: ${error.message}`);
      resultats.push({
        api,
        disponible: false,
        erreur: error.message
      });
    }
  });
  
  return resultats;
};

// Fonction pour v√©rifier les hooks personnalis√©s
const verifierHooks = () => {
  console.log('\nü™ù V√âRIFICATION DES HOOKS:');
  
  const hooks = [
    'useConfirmation',
    'useNotifications',
    'useRealtimeSync',
    'useConfirmationMessage',
    'useSuccessModal'
  ];
  
  const resultats = [];
  
  hooks.forEach(hook => {
    try {
      // V√©rifier si le hook est disponible
      const hookDisponible = typeof window[hook] !== 'undefined';
      
      resultats.push({
        hook,
        disponible: hookDisponible
      });
      
      console.log(`   ${hookDisponible ? '‚úÖ' : '‚ùå'} ${hook}: ${hookDisponible ? 'Disponible' : 'Non disponible'}`);
    } catch (error) {
      console.log(`   ‚ùå ${hook} erreur: ${error.message}`);
      resultats.push({
        hook,
        disponible: false,
        erreur: error.message
      });
    }
  });
  
  return resultats;
};

// Fonction pour cr√©er des donn√©es de test
const creerDonneesTest = async () => {
  console.log('\nüß™ CR√âATION DE DONN√âES DE TEST:');
  
  try {
    // Cr√©er des produits de test
    const produitsTest = [
      {
        _id: 'test-prod-1',
        name: 'Ciment Test',
        description: 'Ciment de test pour diagnostic',
        price: 50000,
        stock: 100,
        productType: 'construction',
        category: 'Mat√©riaux de construction',
        images: [],
        createdAt: new Date().toISOString()
      },
      {
        _id: 'test-prod-2',
        name: 'T√©l√©phone Test',
        description: 'T√©l√©phone de test pour diagnostic',
        price: 200000,
        stock: 50,
        productType: 'electronics',
        category: '√âlectronique',
        images: [],
        createdAt: new Date().toISOString()
      }
    ];
    
    // Sauvegarder les produits
    localStorage.setItem('koula_products', JSON.stringify(produitsTest));
    console.log('‚úÖ Produits de test cr√©√©s');
    
    // Cr√©er des commandes de test
    const commandesTest = [
      {
        _id: 'test-order-1',
        trackingNumber: 'CMD-TEST-001',
        user: {
          firstName: 'Test',
          lastName: 'Client',
          email: 'test@example.com',
          phone: '+224 123 456 789'
        },
        items: [
          {
            product: 'test-prod-1',
            name: 'Ciment Test',
            quantity: 2,
            price: 50000
          }
        ],
        total: 100000,
        orderStatus: 'pending_approval',
        createdAt: new Date().toISOString()
      }
    ];
    
    localStorage.setItem('clientOrders', JSON.stringify(commandesTest));
    console.log('‚úÖ Commandes de test cr√©√©es');
    
    // Cr√©er des mouvements de stock de test
    const mouvementsTest = [
      {
        id: 'test-movement-1',
        productId: 'test-prod-1',
        productName: 'Ciment Test',
        type: 'in',
        quantity: 100,
        reason: 'Stock initial',
        category: 'construction',
        date: new Date().toISOString().split('T')[0],
        createdAt: new Date().toISOString()
      }
    ];
    
    localStorage.setItem('stockMovements', JSON.stringify(mouvementsTest));
    console.log('‚úÖ Mouvements de stock de test cr√©√©s');
    
    return {
      produits: produitsTest.length,
      commandes: commandesTest.length,
      mouvements: mouvementsTest.length
    };
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation donn√©es test:', error);
    return null;
  }
};

// Fonction pour tester la navigation admin
const testerNavigationAdmin = () => {
  console.log('\nüß≠ TEST DE LA NAVIGATION ADMIN:');
  
  const liensAdmin = document.querySelectorAll('a[href*="/admin"]');
  const boutonsAdmin = document.querySelectorAll('button[onclick*="admin"]');
  
  console.log(`üìä ${liensAdmin.length} liens admin trouv√©s`);
  console.log(`üìä ${boutonsAdmin.length} boutons admin trouv√©s`);
  
  liensAdmin.forEach((lien, index) => {
    console.log(`   ${index + 1}. ${lien.href} - ${lien.textContent.trim()}`);
  });
  
  return {
    liens: liensAdmin.length,
    boutons: boutonsAdmin.length
  };
};

// Fonction principale de diagnostic
const diagnosticAdminComplet = async () => {
  console.log('üöÄ D√âMARRAGE DU DIAGNOSTIC ADMIN COMPLET...');
  
  // 1. V√©rifier les donn√©es localStorage
  console.log('\n' + '='.repeat(60));
  console.log('1Ô∏è‚É£ V√âRIFICATION DES DONN√âES LOCALSTORAGE');
  console.log('='.repeat(60));
  const donnees = verifierDonneesLocalStorage();
  
  // 2. V√©rifier les erreurs JavaScript
  console.log('\n' + '='.repeat(60));
  console.log('2Ô∏è‚É£ V√âRIFICATION DES ERREURS JAVASCRIPT');
  console.log('='.repeat(60));
  const erreurs = verifierErreursJavaScript();
  
  // 3. Tester les pages admin
  console.log('\n' + '='.repeat(60));
  console.log('3Ô∏è‚É£ TEST DES PAGES ADMIN');
  console.log('='.repeat(60));
  const pages = testerPagesAdmin();
  
  // 4. V√©rifier les composants React
  console.log('\n' + '='.repeat(60));
  console.log('4Ô∏è‚É£ V√âRIFICATION DES COMPOSANTS REACT');
  console.log('='.repeat(60));
  const composants = verifierComposantsReact();
  
  // 5. V√©rifier les APIs
  console.log('\n' + '='.repeat(60));
  console.log('5Ô∏è‚É£ V√âRIFICATION DES APIs');
  console.log('='.repeat(60));
  const apis = verifierAPIs();
  
  // 6. V√©rifier les hooks
  console.log('\n' + '='.repeat(60));
  console.log('6Ô∏è‚É£ V√âRIFICATION DES HOOKS');
  console.log('='.repeat(60));
  const hooks = verifierHooks();
  
  // 7. Cr√©er des donn√©es de test
  console.log('\n' + '='.repeat(60));
  console.log('7Ô∏è‚É£ CR√âATION DE DONN√âES DE TEST');
  console.log('='.repeat(60));
  const donneesTest = await creerDonneesTest();
  
  // 8. Tester la navigation
  console.log('\n' + '='.repeat(60));
  console.log('8Ô∏è‚É£ TEST DE LA NAVIGATION ADMIN');
  console.log('='.repeat(60));
  const navigation = testerNavigationAdmin();
  
  // 9. R√©sum√© final
  console.log('\n' + '='.repeat(70));
  console.log('üìã R√âSUM√â DU DIAGNOSTIC ADMIN');
  console.log('='.repeat(70));
  
  console.log('üîç R√©sultats:');
  console.log(`- Donn√©es localStorage: ${Object.keys(donnees).length} cl√©s`);
  console.log(`- Erreurs JavaScript: ${erreurs.length}`);
  console.log(`- Pages admin test√©es: ${pages.length}`);
  console.log(`- Composants React: ${composants.length}`);
  console.log(`- APIs v√©rifi√©es: ${apis.length}`);
  console.log(`- Hooks v√©rifi√©s: ${hooks.length}`);
  console.log(`- Donn√©es de test: ${donneesTest ? 'Cr√©√©es' : '√âchec'}`);
  console.log(`- Navigation admin: ${navigation.liens} liens, ${navigation.boutons} boutons`);
  
  // Identifier les probl√®mes
  const problemes = [];
  
  if (donnees.clientOrders.length === 0) {
    problemes.push('Aucune commande dans localStorage');
  }
  
  if (donnees.koula_products.length === 0) {
    problemes.push('Aucun produit dans localStorage');
  }
  
  if (erreurs.length > 0) {
    problemes.push(`${erreurs.length} erreurs JavaScript d√©tect√©es`);
  }
  
  const pagesInaccessibles = pages.filter(p => !p.accessible);
  if (pagesInaccessibles.length > 0) {
    problemes.push(`${pagesInaccessibles.length} pages admin inaccessibles`);
  }
  
  const composantsManquants = composants.filter(c => !c.existe);
  if (composantsManquants.length > 0) {
    problemes.push(`${composantsManquants.length} composants React manquants`);
  }
  
  console.log('\nüö® PROBL√àMES IDENTIFI√âS:');
  if (problemes.length === 0) {
    console.log('‚úÖ Aucun probl√®me majeur d√©tect√©');
  } else {
    problemes.forEach((probleme, index) => {
      console.log(`   ${index + 1}. ${probleme}`);
    });
  }
  
  console.log('\nüí° RECOMMANDATIONS:');
  console.log('1. V√©rifiez que toutes les routes admin sont correctement configur√©es');
  console.log('2. Assurez-vous que les composants React sont correctement import√©s');
  console.log('3. V√©rifiez que les APIs sont disponibles et fonctionnelles');
  console.log('4. Cr√©ez des donn√©es de test si n√©cessaire');
  console.log('5. V√©rifiez la console pour les erreurs JavaScript');
  
  console.log('\n‚úÖ DIAGNOSTIC TERMIN√â!');
  
  return {
    donnees,
    erreurs,
    pages,
    composants,
    apis,
    hooks,
    donneesTest,
    navigation,
    problemes
  };
};

// Exporter les fonctions
window.verifierDonneesLocalStorage = verifierDonneesLocalStorage;
window.verifierErreursJavaScript = verifierErreursJavaScript;
window.testerPagesAdmin = testerPagesAdmin;
window.verifierComposantsReact = verifierComposantsReact;
window.verifierAPIs = verifierAPIs;
window.verifierHooks = verifierHooks;
window.creerDonneesTest = creerDonneesTest;
window.testerNavigationAdmin = testerNavigationAdmin;
window.diagnosticAdminComplet = diagnosticAdminComplet;

console.log('üîß Fonctions disponibles:');
console.log('- verifierDonneesLocalStorage() : V√©rifier les donn√©es');
console.log('- verifierErreursJavaScript() : V√©rifier les erreurs');
console.log('- testerPagesAdmin() : Tester les pages');
console.log('- verifierComposantsReact() : V√©rifier les composants');
console.log('- verifierAPIs() : V√©rifier les APIs');
console.log('- verifierHooks() : V√©rifier les hooks');
console.log('- creerDonneesTest() : Cr√©er des donn√©es test');
console.log('- testerNavigationAdmin() : Tester la navigation');
console.log('- diagnosticAdminComplet() : Diagnostic complet');

// Ex√©cuter automatiquement
diagnosticAdminComplet();
