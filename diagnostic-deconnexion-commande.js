// Script de diagnostic pour le probl√®me de d√©connexion lors de la confirmation de commande
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç DIAGNOSTIC - PROBL√àME DE D√âCONNEXION LORS DE LA COMMANDE');
console.log('=' .repeat(70));

// Fonction pour v√©rifier l'√©tat de l'authentification
const checkAuthState = () => {
  console.log('\nüìä √âTAT DE L\'AUTHENTIFICATION:');
  console.log('- Token localStorage:', localStorage.getItem('token') ? '‚úÖ Pr√©sent' : '‚ùå Absent');
  console.log('- User localStorage:', localStorage.getItem('user') ? '‚úÖ Pr√©sent' : '‚ùå Absent');
  
  // V√©rifier si l'utilisateur est connect√© dans le contexte React
  const authElements = document.querySelectorAll('[data-testid="user-menu"], [data-testid="logout-button"]');
  console.log('- √âl√©ments UI auth:', authElements.length > 0 ? '‚úÖ Pr√©sents' : '‚ùå Absents');
  
  // V√©rifier les cookies de session
  console.log('- Cookies:', document.cookie ? '‚úÖ Pr√©sents' : '‚ùå Absents');
  
  return {
    hasToken: !!localStorage.getItem('token'),
    hasUser: !!localStorage.getItem('user'),
    hasAuthUI: authElements.length > 0
  };
};

// Fonction pour simuler une commande et surveiller les changements
const simulateOrderCreation = async () => {
  console.log('\nüß™ SIMULATION DE CR√âATION DE COMMANDE:');
  
  // V√©rifier l'√©tat avant
  const beforeState = checkAuthState();
  console.log('üìã √âtat AVANT commande:', beforeState);
  
  try {
    // Importer l'API locale
    const { localOrdersAPI } = await import('./client/src/services/localOrdersAPI.js');
    
    const testOrderData = {
      items: [
        {
          product: 'test-product-id',
          quantity: 1,
          price: 100000,
          name: 'Produit Test Diagnostic',
          image: ''
        }
      ],
      shippingAddress: {
        firstName: 'Test',
        lastName: 'Diagnostic',
        street: '123 Rue Test',
        city: 'Conakry',
        phone: '+224 123 456 789'
      },
      paymentMethod: 'mobile_money',
      notes: 'Test de diagnostic - d√©connexion',
      subtotal: 100000,
      tax: 0,
      total: 100000
    };
    
    console.log('üì¶ Cr√©ation de la commande...');
    const result = await localOrdersAPI.createOrder(testOrderData);
    
    if (result.success) {
      console.log('‚úÖ Commande cr√©√©e avec succ√®s:', result.data.order._id);
    } else {
      console.error('‚ùå Erreur cr√©ation commande:', result.error);
    }
    
    // Attendre un peu pour voir les changements
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // V√©rifier l'√©tat apr√®s
    const afterState = checkAuthState();
    console.log('üìã √âtat APR√àS commande:', afterState);
    
    // Comparer les √©tats
    const authLost = beforeState.hasToken && !afterState.hasToken;
    const userLost = beforeState.hasUser && !afterState.hasUser;
    
    if (authLost || userLost) {
      console.error('üö® PROBL√àME D√âTECT√â: D√©connexion lors de la commande!');
      console.error('- Token perdu:', authLost);
      console.error('- User perdu:', userLost);
    } else {
      console.log('‚úÖ Aucune d√©connexion d√©tect√©e');
    }
    
    return {
      success: result.success,
      authLost,
      userLost,
      beforeState,
      afterState
    };
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la simulation:', error);
    return { success: false, error: error.message };
  }
};

// Fonction pour surveiller les changements de localStorage
const monitorLocalStorage = () => {
  console.log('\nüëÅÔ∏è SURVEILLANCE DU LOCALSTORAGE:');
  
  const originalSetItem = localStorage.setItem;
  const originalRemoveItem = localStorage.removeItem;
  
  localStorage.setItem = function(key, value) {
    console.log(`üìù localStorage.setItem: ${key} = ${value?.substring(0, 50)}...`);
    return originalSetItem.apply(this, arguments);
  };
  
  localStorage.removeItem = function(key) {
    console.log(`üóëÔ∏è localStorage.removeItem: ${key}`);
    return originalRemoveItem.apply(this, arguments);
  };
  
  console.log('‚úÖ Surveillance activ√©e - surveillez les changements ci-dessous');
};

// Fonction pour v√©rifier les erreurs dans la console
const checkConsoleErrors = () => {
  console.log('\nüîç V√âRIFICATION DES ERREURS:');
  
  const originalError = console.error;
  const errors = [];
  
  console.error = function(...args) {
    errors.push(args.join(' '));
    originalError.apply(console, args);
  };
  
  // Restaurer apr√®s 5 secondes
  setTimeout(() => {
    console.error = originalError;
    console.log('üìä Erreurs captur√©es:', errors.length);
    errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error}`);
    });
  }, 5000);
  
  console.log('‚úÖ Surveillance des erreurs activ√©e pour 5 secondes');
};

// Fonction pour tester l'API serveur
const testServerAPI = async () => {
  console.log('\nüåê TEST DE L\'API SERVEUR:');
  
  try {
    const response = await fetch('http://localhost:3001/api/auth/me', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('üì° Statut r√©ponse:', response.status);
    
    if (response.status === 401) {
      console.error('‚ùå Token invalide ou expir√©');
      return false;
    } else if (response.ok) {
      console.log('‚úÖ API serveur accessible');
      return true;
    } else {
      console.warn('‚ö†Ô∏è R√©ponse inattendue:', response.status);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur API serveur:', error.message);
    return false;
  }
};

// Fonction principale de diagnostic
const runDiagnostic = async () => {
  console.log('üöÄ D√âMARRAGE DU DIAGNOSTIC...');
  
  // 1. V√©rifier l'√©tat initial
  console.log('\n' + '='.repeat(50));
  console.log('1Ô∏è‚É£ V√âRIFICATION DE L\'√âTAT INITIAL');
  console.log('='.repeat(50));
  const initialState = checkAuthState();
  
  // 2. Surveiller localStorage
  console.log('\n' + '='.repeat(50));
  console.log('2Ô∏è‚É£ SURVEILLANCE DU LOCALSTORAGE');
  console.log('='.repeat(50));
  monitorLocalStorage();
  
  // 3. Surveiller les erreurs
  console.log('\n' + '='.repeat(50));
  console.log('3Ô∏è‚É£ SURVEILLANCE DES ERREURS');
  console.log('='.repeat(50));
  checkConsoleErrors();
  
  // 4. Tester l'API serveur
  console.log('\n' + '='.repeat(50));
  console.log('4Ô∏è‚É£ TEST DE L\'API SERVEUR');
  console.log('='.repeat(50));
  const serverOk = await testServerAPI();
  
  // 5. Simuler une commande
  console.log('\n' + '='.repeat(50));
  console.log('5Ô∏è‚É£ SIMULATION DE COMMANDE');
  console.log('='.repeat(50));
  const orderResult = await simulateOrderCreation();
  
  // 6. R√©sum√©
  console.log('\n' + '='.repeat(70));
  console.log('üìã R√âSUM√â DU DIAGNOSTIC');
  console.log('='.repeat(70));
  
  console.log('üîç R√©sultats:');
  console.log('- √âtat initial:', initialState);
  console.log('- API serveur:', serverOk ? '‚úÖ OK' : '‚ùå Probl√®me');
  console.log('- Commande:', orderResult.success ? '‚úÖ Cr√©√©e' : '‚ùå √âchec');
  
  if (orderResult.authLost || orderResult.userLost) {
    console.log('üö® PROBL√àME CONFIRM√â: D√©connexion lors de la commande');
    console.log('üí° Solutions possibles:');
    console.log('   1. V√©rifier les intercepteurs axios');
    console.log('   2. V√©rifier la gestion des erreurs dans Checkout.js');
    console.log('   3. V√©rifier AuthContext pour les changements d\'√©tat');
    console.log('   4. V√©rifier les appels API qui pourraient √©chouer');
  } else {
    console.log('‚úÖ Aucun probl√®me de d√©connexion d√©tect√©');
  }
  
  console.log('\nüîß Pour r√©soudre le probl√®me:');
  console.log('1. V√©rifiez les logs ci-dessus');
  console.log('2. Surveillez les changements de localStorage');
  console.log('3. V√©rifiez les erreurs dans la console');
  console.log('4. Testez avec une vraie commande');
};

// Exporter les fonctions pour utilisation manuelle
window.checkAuthState = checkAuthState;
window.simulateOrderCreation = simulateOrderCreation;
window.monitorLocalStorage = monitorLocalStorage;
window.testServerAPI = testServerAPI;
window.runDiagnostic = runDiagnostic;

console.log('üîß Fonctions de diagnostic disponibles:');
console.log('- checkAuthState() : V√©rifier l\'√©tat de l\'authentification');
console.log('- simulateOrderCreation() : Simuler une commande');
console.log('- monitorLocalStorage() : Surveiller localStorage');
console.log('- testServerAPI() : Tester l\'API serveur');
console.log('- runDiagnostic() : Ex√©cuter le diagnostic complet');

// Ex√©cuter automatiquement le diagnostic
runDiagnostic();
